import pygame

class Widget:
    def __init__(self, x, y, w, h, colour, fontsize):
        self.x = x
        self.y = y
        self.w = w
        self.h = h
        self.fontsize = fontsize
        self.myfont = pygame.font.SysFont('Comic Sans MS', self.fontsize)
        self.rect_colour_before = colour
        self.rect = pygame.Rect(self.x, self.y, self.w, self.h)

    def check_if_clicked(self, pos):
        x,y = pos[0],pos[1]
        if self.x < x < (self.x+self.w):
            if self.y < y < (self.y+self.h):
                self.clicked = True
                return True
        else:
            return False

    def draw_widget(self, win):
        pygame.draw.rect(win, self.rect_colour_before, self.rect)

    def resize_widget(self, resize_ratio):
        self.x, self.y, self.w, self.h = self.x*resize_ratio[0], self.y*resize_ratio[1], self.w*resize_ratio[0], self.h*resize_ratio[1]
        self.fontsize = int((self.fontsize*resize_ratio[1]).__round__())
        self.myfont = pygame.font.SysFont('Comic Sans MS', self.fontsize)
        self.rect = pygame.Rect(self.x, self.y, self.w, self.h)


class Button(Widget):
    def __init__(self,x,y,w,h,rcb,rca,tc,tb,ta,fontsize):
        super().__init__(x,y,w,h,rcb, fontsize)
        self.rect_colour_after = rca
        self.text_colour = tc
        self.text_before = tb
        self.text_after = ta
        self.clicked = False


    def draw_button(self, win):
        if self.clicked:
            pygame.draw.rect(win, self.rect_colour_after, self.rect)
            if self.text_after is not None:
                textsurface = self.myfont.render(self.text_after, False, self.text_colour)
                win.blit(textsurface, (self.x + 5, (self.y + (0.25 * self.h))))
        else:
            pygame.draw.rect(win, self.rect_colour_before, self.rect)
            if self.text_before is not None:
                textsurface = self.myfont.render(self.text_before, False, self.text_colour)
                win.blit(textsurface, (self.x+5, (self.y+(0.25*self.h))))

class Label(Widget):
    def __init__(self,x,y,w,h,tc,fontsize):
        super().__init__(x, y, w, h, None, fontsize)
        self.text_colour = tc

        self.inner_colour = (240, 240, 240)
        self.outer_colour = (169, 169, 169)
        self.text = "Enter text"
        self.clicked = False
        self.capital_active = False
        self.mfy = 0.1
        self.mfx = 0.025
        self.inner_rect = pygame.Rect(self.x+(self.mfx*self.w), self.y+(self.mfy*self.h), self.w-((self.mfx*2)*self.w), self.h-((self.mfy*2)*self.h))


    def draw_label(self, win):
        pygame.draw.rect(win, self.outer_colour, self.rect)
        pygame.draw.rect(win, self.inner_colour, self.inner_rect)
        textsurface = self.myfont.render(self.text, False, self.text_colour)
        win.blit(textsurface, ((self.x + ((self.mfx+0.02)*self.w)), (self.y + ((self.mfy+0.01) * self.h))))

    def check_if_clicked(self, pos):
        x,y = pos[0],pos[1]
        if self.x < x < (self.x+self.w):
            if self.y < y < (self.y+self.h):
                self.clicked = True
                self.text = ""
        if x > (self.x+self.w) or x < self.x or y > (self.y+self.h) or y < self.y:
            self.clicked = False
            #self.text = "Enter text"

    def check_keys(self, key):
        if self.clicked:
            if key == 8:
                self.text = self.text[:-1]
            elif key == 301:
                if self.capital_active:
                    self.capital_active = False
                else:
                    self.capital_active = True
            else:
                if self.capital_active:
                    self.text += chr(key).upper()
                else:
                    self.text += chr(key).lower()

    def resize_widget(self, resize_ratio):
        super().resize_widget(resize_ratio)
        self.inner_rect = pygame.Rect(self.x + (self.mfx * self.w), self.y + (self.mfy * self.h),
                                      self.w - ((self.mfx * 2) * self.w), self.h - ((self.mfy * 2) * self.h))



